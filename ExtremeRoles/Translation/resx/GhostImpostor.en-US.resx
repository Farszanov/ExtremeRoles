<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Ventgeist" xml:space="preserve">
    <value>Vent-geist</value>
  </data>
  <data name="VentgeistRange" xml:space="preserve">
    <value>"RATTLE" : Ability Range</value>
  </data>
  <data name="VentgeistAbilityCoolTime" xml:space="preserve">
    <value>"RATTLE" : Ability Cooldown</value>
  </data>
  <data name="VentgeistAbilityCount" xml:space="preserve">
    <value>"RATTLE" : Ability Charges</value>
  </data>
  <data name="VentgeistIsReportAbility" xml:space="preserve">
    <value>"RATTLE" : Does alert ability use on meetings</value>
  </data>
  <data name="VentgeistShortDescription" xml:space="preserve">
    <value>RATTLE Vents and mischief the crews</value>
  </data>
  <data name="VentgeistFullDescription" xml:space="preserve">
    <value> An IMPOSTOR GHOST with the ability to rattle the  
VENT!
 "RATTLE" : Plays the VENT opening/closing 
animation.</value>
  </data>
  <data name="VentgeistVentAnimeButton" xml:space="preserve">
    <value>RATTLE</value>
  </data>
  <data name="VentgeistVentAnime" xml:space="preserve">
    <value>A Vent-geist rattled a vent!</value>
  </data>
  <data name="SaboEvil" xml:space="preserve">
    <value>Sabota-geist</value>
  </data>
  <data name="SaboEvilAbilityCoolTime" xml:space="preserve">
    <value>"SABOLISH" : Ability Cooldown</value>
  </data>
  <data name="SaboEvilAbilityCount" xml:space="preserve">
    <value>"SABOLISH" : Ability Charges</value>
  </data>
  <data name="SaboEvilIsReportAbility" xml:space="preserve">
    <value>"SABOLISH" : Does alert ability use on meetings</value>
  </data>
  <data name="SaboEvilShortDescription" xml:space="preserve">
    <value>Support with Sabotages by nullifying cooldowns</value>
  </data>
  <data name="SaboEvilFullDescription" xml:space="preserve">
    <value> An IMPOSTOR GHOST with the ability to help 
IMPOSTORS.
 "SABOLISH" : Clears the Sabotage cooldown on use.
   - This only affects IMPOSTORS.</value>
  </data>
  <data name="SaboEvilResetSabotageCoolButton" xml:space="preserve">
    <value>SABOLISH</value>
  </data>
  <data name="SaboEvilResetSabotageCool" xml:space="preserve">
    <value>A Sabota-geist helped the Impostor!</value>
  </data>
  <data name="Igniter" xml:space="preserve">
    <value>Igniter</value>
  </data>
  <data name="IgniterAbilityCoolTime" xml:space="preserve">
    <value>"LIGHTS OFF" : Ability Cooldown</value>
  </data>
  <data name="IgniterAbilityActiveTime" xml:space="preserve">
    <value>"LIGHTS OFF" : Ability Duration</value>
  </data>
  <data name="IgniterIsReportAbility" xml:space="preserve">
    <value>"LIGHTS OFF" : Does alert ability use on meetings</value>
  </data>
  <data name="IgniterAbilityCount" xml:space="preserve">
    <value>"LIGHTS OFF" : Ability Charges</value>
  </data>
  <data name="IgniterIsEffectImpostor" xml:space="preserve">
    <value>"LIGHTS OFF" : Does affect IMPOSTORS </value>
  </data>
  <data name="IgniterIsEffectNeutral" xml:space="preserve">
    <value>"LIGHTS OFF" : Does affect NEUTRALS </value>
  </data>
  <data name="IgniterShortDescription" xml:space="preserve">
    <value>Support IMPOSTORS by </value>
  </data>
  <data name="IgniterFullDescription" xml:space="preserve">
    <value>An IMPOSTOR GHOST with the ability to turn the LIGHTS OFF.
*Can ONLY be assigned to a former Last Wolf
"LIGHTS OFF" : Changes living players' sight to the sight of the
 "lights-off" sabotage.
 - A "lights-off" sabotage as an ability
 - Is not a sabotage; cannot be repaired
 - Does not affect players which cannot be affected by the "lights-
    off" sabotage. </value>
  </data>
  <data name="IgniterSwitchLightButton" xml:space="preserve">
    <value>LIGHTS OFF</value>
  </data>
  <data name="IgniterSwitchLight" xml:space="preserve">
    <value>An Igniter turned off the lights!</value>
  </data>
  <data name="Doppelganger" xml:space="preserve">
    <value>Doppelganger</value>
  </data>
  <data name="DoppelgangerAbilityCoolTime" xml:space="preserve">
    <value>"DOPPEL" : Ability Cooldown</value>
  </data>
  <data name="DoppelgangerAbilityActiveTime" xml:space="preserve">
    <value>"DOPPEL" : Duration for dummy to be visible</value>
  </data>
  <data name="DoppelgangerIsReportAbility" xml:space="preserve">
    <value>"DOPPEL" : Does alert ability use on meetings</value>
  </data>
  <data name="DoppelgangerAbilityCount" xml:space="preserve">
    <value>"DOPPEL" : Ability Charges</value>
  </data>
  <data name="DoppelgangerDoppel" xml:space="preserve">
    <value>Someone's doppelganger was found</value>
  </data>
  <data name="DoppelgangerDoppelButton" xml:space="preserve">
    <value>DOPPEL</value>
  </data>
  <data name="DoppelgangerFullDescription" xml:space="preserve">
    <value>An IMPOSTOR GHOST who can show a player's dummy to survivors.
Button ability "DOPPEL":
After pressing the button, you can show a dummy of the selected player to survivors.</value>
  </data>
  <data name="DoppelgangerShortDescription" xml:space="preserve">
    <value>Surprise everyone with "DOPPEL"</value>
  </data>
</root>